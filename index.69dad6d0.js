var t=globalThis,e={},i={},h=t.parcelRequire01d3;null==h&&((h=function(t){if(t in e)return e[t].exports;if(t in i){var h=i[t];delete i[t];var a={id:t,exports:{}};return e[t]=a,h.call(a.exports,a,a.exports),a.exports}var r=Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}).register=function(t,e){i[t]=e},t.parcelRequire01d3=h);var a=h.register;a("jjjrG",function(t,e){Object.defineProperty(t.exports,"__esModule",{value:!0}),t.exports.createFullSizeCanvasAndReturnWithWebGlContextAndResizeCallback=t.exports.createFullSizeCanvasAndReturnWith2DContextAndResizeCallback=t.exports.createFixedSizeCanvasAndReturnWithContext=void 0,t.exports.createFixedSizeCanvasAndReturnWithContext=(t,e,i,h)=>{let a=document.createElement("canvas");return e.appendChild(a),a.id=t,a.width=i,a.height=h,{context:a.getContext("2d"),canvas:a}},t.exports.createFullSizeCanvasAndReturnWithWebGlContextAndResizeCallback=(t,e)=>i(t,e,"webgl"),t.exports.createFullSizeCanvasAndReturnWith2DContextAndResizeCallback=(t,e)=>i(t,e,"2d");let i=(t,e,i)=>{let a=h(e),r=document.createElement("canvas");e.appendChild(r),r.id=t,r.width=a.width,r.height=a.height;let s={context:r.getContext(i),canvas:r,resizeCallback:()=>{a=h(e),(r.width!==a.width||r.height!==a.height)&&(r.width=a.width,r.height=a.height)}};return s},h=t=>{let e={width:t.clientWidth,height:t.clientHeight};return e}}),a("i1tWs",function(t,e){Object.defineProperty(t.exports,"__esModule",{value:!0}),t.exports.BasicObject=t.exports.translateCoordinatesToCameraSpace=t.exports.getTranslatedCoordinates=t.exports.clone=void 0;var i=h("2Ru5L");t.exports.clone=t=>Object.assign({},t),t.exports.getTranslatedCoordinates=(t,e)=>({renderX:t.renderX,renderY:e.canvas.height-t.renderY-t.renderHeight}),t.exports.translateCoordinatesToCameraSpace=(t,e)=>({renderX:t.renderX-e.frameX,renderY:t.renderY-e.frameY,renderWidth:t.renderWidth,renderHeight:t.renderHeight});class a extends i.PhysicsObject{constructor(t,e,i,h){super(t,e,i,h),this.sourceX=0,this.sourceY=0,this.sourceWidth=0,this.sourceHeight=0,this.circle=!1,this.colour="rgba(0, 0, 0, 0.3)",this.renderX=t,this.renderY=e,this.renderWidth=i,this.renderHeight=h}}t.exports.BasicObject=a}),a("2Ru5L",function(t,e){var i=t.exports&&t.exports.__createBinding||(Object.create?function(t,e,i,h){void 0===h&&(h=i);var a=Object.getOwnPropertyDescriptor(e,i);(!a||("get"in a?!e.__esModule:a.writable||a.configurable))&&(a={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,h,a)}:function(t,e,i,h){void 0===h&&(h=i),t[h]=e[i]}),a=t.exports&&t.exports.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),r=t.exports&&t.exports.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var h in t)"default"!==h&&Object.prototype.hasOwnProperty.call(t,h)&&i(e,t,h);return a(e,t),e};Object.defineProperty(t.exports,"__esModule",{value:!0}),t.exports.PhysicsObject=void 0;let s=r(h("i1tWs"));t.exports.PhysicsObject=class{constructor(t=0,e=0,i=100,h=100,a=0,r=0,s=!0,l=1){this.id=0,this.x=this.xPrevious=t,this.y=this.yPrevious=e,this.width=i,this.height=h,this.vectorX=a,this.vectorY=r,this.obeysGravity=s,this.gravityScale=l}applyDelta(t,e){l(this,t,e)}createNewFromDelta(t,e){return d(this,t,e)}};let l=(t,e,i)=>{t.xPrevious=t.x,t.yPrevious=t.y,n(t,e,i),o(t,i)},d=(t,e,i)=>{let h=s.clone(t);return l(h,e,i),h},o=(t,e)=>{t.x=t.x+t.vectorX*e,t.y=t.y+t.vectorY*e},n=(t,e,i)=>{t.obeysGravity&&(t.vectorY=Math.max(e.minVerticalVelocityPerSecond*t.gravityScale,t.vectorY+=e.gravityAccelerationPerSecond*i*t.gravityScale))}}),a("5PnyD",function(t,e){var i,h;Object.defineProperty(t.exports,"__esModule",{value:!0}),t.exports.CollisionSide=t.exports.checkImpactSideOfMovingAabbOnStaticAabb=t.exports.doAabbsOverlap=void 0,(h=i||(t.exports.CollisionSide=i={})).Bottom="BOTTOM",h.Top="TOP",h.Left="LEFT",h.Right="RIGHT",t.exports.doAabbsOverlap=(t,e,i,h,a,r,s,l)=>{let d=!1;return t<a+s&&t+i>a&&e<r+l&&e+h>r&&(d=!0),d},t.exports.checkImpactSideOfMovingAabbOnStaticAabb=(t,e,h,s,l,d,o,n,y,x)=>{let c=h-t,g=s-e;if(0===c&&0===g)return null;//one direction of travel is easy to work out!
if(0==c){let t=g>0?i.Bottom:i.Top;return t}if(0==g){let t=c>0?i.Left:i.Right;return t}if(c>0&&g<0){let{xFactor:d,offset:y}=a(t+l,e,h+l,s),c=r(d,y,o),g=n+x<=c?i.Top:i.Left;return g}if(c<0&&g<0){//bottom left of moving object and top right corner of static object
let{xFactor:l,offset:d}=a(t,e,h,s),c=r(l,d,o+y);return n+x<=c?i.Top:i.Right}if(c>0&&g>0){let{xFactor:y,offset:x}=a(t+l,e+d,h+l,s+d),c=r(y,x,o),g=n>=c?i.Bottom:i.Left;return g}if(c<0&&g>0){//top left of moving object and bottom right corner of static object
let{xFactor:l,offset:x}=a(t,e+d,h,s+d),c=r(l,x,o+y);return n>=c?i.Bottom:i.Right}// we won't get here but typescript complains.
return null};let a=(t,e,i,h)=>{//this is the factor for multiplying X to find Y based on the direction of the line (the steepness and direction/angle of the line)
let a=(h-e)/(i-t);return{xFactor:a,offset:e-a*t}},r=(t,e,i)=>e+i*t}),a("gLy79",function(t,e){var i=t.exports&&t.exports.__createBinding||(Object.create?function(t,e,i,h){void 0===h&&(h=i);var a=Object.getOwnPropertyDescriptor(e,i);(!a||("get"in a?!e.__esModule:a.writable||a.configurable))&&(a={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,h,a)}:function(t,e,i,h){void 0===h&&(h=i),t[h]=e[i]}),a=t.exports&&t.exports.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),r=t.exports&&t.exports.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var h in t)"default"!==h&&Object.prototype.hasOwnProperty.call(t,h)&&i(e,t,h);return a(e,t),e};Object.defineProperty(t.exports,"__esModule",{value:!0}),t.exports.CollisionSide=t.exports.checkImpactSideOfMovingAabbOnStaticAabb=t.exports.doesAabbOverlapOccurInCurrentDelta=t.exports.doAabbsOverlap=void 0;let s=r(h("5PnyD")),l=s.CollisionSide;t.exports.CollisionSide=l,t.exports.doAabbsOverlap=(t,e)=>s.doAabbsOverlap(t.x,t.y,t.width,t.height,e.x,e.y,e.width,e.height),t.exports.doesAabbOverlapOccurInCurrentDelta=(t,e)=>{let i=!1;return!1===s.doAabbsOverlap(t.xPrevious,t.yPrevious,t.width,t.height,e.xPrevious,e.yPrevious,e.width,e.height)&&(i=s.doAabbsOverlap(t.x,t.y,t.width,t.height,e.x,e.y,e.width,e.height)),i},t.exports.checkImpactSideOfMovingAabbOnStaticAabb=(t,e)=>s.checkImpactSideOfMovingAabbOnStaticAabb(t.xPrevious,t.yPrevious,t.x,t.y,t.width,t.height,e.x,e.y,e.width,e.height)}),a("cYJ8Y",function(t,e){Object.defineProperty(t.exports,"__esModule",{value:!0}),t.exports.Pipeline=void 0,t.exports.Pipeline=class{constructor(t){this.pipeline=[],this.canvasContext=t}addPipe(t){this.pipeline=this.pipeline.concat(t)}execute(t,e){let i={canvasContext:this.canvasContext,gameState:e};for(let e of this.pipeline)e.executeDelta(t,i)}}}),a("kcfDG",function(t,e){Object.defineProperty(t.exports,"__esModule",{value:!0}),t.exports.manualStepRunner=t.exports.fixedStepRunner=t.exports.variableStepRunner=void 0,t.exports.variableStepRunner=(t,e=1/120,i=.1)=>{let h=new Date;h.setSeconds(h.getSeconds()-1);let a=!0,r=-1,s=e=>{//const now = new Date();
//let deltaInSeconds = (now.getTime() - _lastStepCall.getTime())/1000;
let h=e/1e3;h-=r,r=e/1e3,//_lastStepCall = now;
//if(deltaInSeconds >= minimumDeltaInSeconds){
//_lastStepCall = now;
t(h=h>i?i:h),!0===a&&window.requestAnimationFrame(t=>{s(t)})};return window.requestAnimationFrame(t=>{s(t)}),()=>{a=!1}},t.exports.fixedStepRunner=(t,e=20)=>{let i=()=>{t(e/1e3)};i();let h=setInterval(i,e);return()=>{clearInterval(h)}},t.exports.manualStepRunner=(t,e=100,i="f")=>{let h=e/1e3,a=e=>{e.key===i&&t(h)};return document.addEventListener("keydown",a),()=>{document.removeEventListener("keydown",a)}}}),a("1Qh2U",function(t,e){Object.defineProperty(t.exports,"__esModule",{value:!0}),t.exports.renderCircle=t.exports.renderRotatedRect=t.exports.renderRect=void 0;// let tempDataForFrame:ITempData;
// export const setTempData = (tempData:Pipeline.ITempData) => {
// 	tempDataForFrame = tempData;
// }
// // convert to render size (this is used to keep the game a specific width)
// export const crs = (renderSize:number) => {
// 	let output = renderSize;
// 	if(tempDataForFrame['displayRatio']){
// 		output = output * tempDataForFrame['displayRatio'];
// 	}
// 	return output;
// }
// export const getTranslatedCoordinatesWithClip = (graphicItem:{renderX:number, renderY:number, renderWidth:number, renderHeight:number}, canvasContext) : {renderX:number, renderY:number, renderWidth:number, renderHeight:number} => {
// 	let height = canvasContext.canvas.width / ASPECT_RATIO;
// 	let offset = 0;
// 	if(canvasContext.canvas.height > height){
// 		offset = (canvasContext.canvas.height - height);
// 	}
// 	let newCooords = {
// 		renderX: crs(graphicItem.renderX), 
// 		//renderY: offset + crs(height - graphicItem.renderY - graphicItem.renderHeight),
// 		renderY: canvasContext.canvas.height - offset - crs(graphicItem.renderY) - crs(graphicItem.renderHeight),
// 		renderWidth: crs(graphicItem.renderWidth),
// 		renderHeight: crs(graphicItem.renderHeight)
// 	};
// 	return newCooords;
// }
let i=(t,e,i)=>{let h=(i.canvas.height-e.frameHeight*e.pixelToFrameRatio)/2,a=(t.renderY+t.renderHeight)*e.pixelToFrameRatio,r=i.canvas.height-h-a;return{renderX:e.xOffset+(t.renderX-e.frameX)*e.pixelToFrameRatio,renderY:r,renderWidth:t.renderWidth*e.pixelToFrameRatio,renderHeight:t.renderHeight*e.pixelToFrameRatio}};t.exports.renderRect=(t,e,h)=>{h.beginPath(),h.fillStyle=t.colour;let a=i(t,e,h);//const translateCoordinatesForCanvas = getTranslatedCoordinates(p, ctx);
//ctx.fillRect(p.x - camera.x, p.y - camera.y, p.width, p.height);
h.fillRect(a.renderX,a.renderY,a.renderWidth,a.renderHeight)},t.exports.renderRotatedRect=(t,e,h,a)=>{// save ctx so we can undo our mods
a.save(),a.beginPath(),a.fillStyle=t.colour;let r=i(t,h,a);// move to the center of the sprite for rotation
a.translate(r.renderX+r.renderWidth/2,r.renderY+r.renderHeight/2),// rotate at center
a.rotate((360-e)*Math.PI/180),//const translateCoordinatesForCanvas = getTranslatedCoordinates(p, ctx);
//ctx.fillRect(p.x - camera.x, p.y - camera.y, p.width, p.height);
a.fillRect(-r.renderWidth/2,-r.renderHeight/2,r.renderWidth,r.renderHeight),// undo our mods
a.restore()},t.exports.renderCircle=(t,e,h)=>{h.beginPath(),h.fillStyle=t.colour;let a=i(t,e,h);h.arc(a.renderX+a.renderWidth/2,a.renderY+a.renderWidth/2,a.renderWidth/2,0,2*Math.PI),h.fill()}});//import * as canvasCreator from "../canvas/canvas";
//import sceneManager from "./scenes/scene-manager"
//import createFullSizeCanvasAndReturnWith2DContextAndResizeCallback from "rewind";
var r=h("jjjrG"),s={},l=s&&s.__createBinding||(Object.create?function(t,e,i,h){void 0===h&&(h=i);var a=Object.getOwnPropertyDescriptor(e,i);(!a||("get"in a?!e.__esModule:a.writable||a.configurable))&&(a={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,h,a)}:function(t,e,i,h){void 0===h&&(h=i),t[h]=e[i]}),d=s&&s.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=s&&s.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&l(e,t,i);return d(e,t),e};Object.defineProperty(s,"__esModule",{value:!0}),s.Renderer=s.Canvas=s.Runners=s.Pipeline=s.PhysicsCollisions=s.Collisions=s.PhysicsObject=s.Particle=s.GameStateStack=s.Shake=s.Camera=s.BasicObject=s.createFullSizeCanvasAndReturnWith2DContextAndResizeCallback=void 0;var n={};Object.defineProperty(n,"__esModule",{value:!0}),n.Camera=void 0,n.Camera=class{constructor(t,e,i,h,a){this.x=0,this.y=0,this.frameX=0,this.frameY=0,this.aspectRatio=16/9,this.xOffset=0,this.yOffset=0,this.pixelToFrameRatio=1,this.setCanvasSize=t=>{this.pixelToFrameRatio=1,this.containWidth&&this.containHeight?(this.pixelToFrameRatio=t.canvas.width/this.frameWidth,this.pixelToFrameRatio=Math.min(this.pixelToFrameRatio,t.canvas.height/this.frameHeight),this.xOffset=(t.canvas.width-this.frameWidth*this.pixelToFrameRatio)/2,this.yOffset=(t.canvas.height-this.frameHeight*this.pixelToFrameRatio)/2):this.containWidth?(this.pixelToFrameRatio=t.canvas.width/this.frameWidth,this.xOffset=(t.canvas.width-this.frameWidth*this.pixelToFrameRatio)/2,this.yOffset=0):this.containHeight&&(this.pixelToFrameRatio=t.canvas.height/this.frameHeight,this.yOffset=(t.canvas.height-this.frameHeight*this.pixelToFrameRatio)/2,this.xOffset=0)},this.containWidth=t,this.containHeight=e,this.frameWidth=i,this.frameHeight=h,this.setCanvasSize(a)}},Object.defineProperty(s,"Camera",{enumerable:!0,get:function(){return n.Camera}});var y={};Object.defineProperty(y,"__esModule",{value:!0}),y.createObjectFromDelta=y.Shake=void 0;var x=h("i1tWs");class c extends x.BasicObject{constructor(t,e){super(0,0,0,0),this.remove=!1,this.scale=t,this.life=e,this.shakeDelta=0}applyDelta(t,e){g(this,t,e)}}y.Shake=c;const g=(t,e,i)=>{t.shakeDelta+=i;let h=1-t.shakeDelta/t.life;Math.random()>=.5?t.x=5*t.scale*h:t.x=-5*t.scale*h,Math.random()>=.5?t.y=5*t.scale*h:t.y=-5*t.scale*h,t.shakeDelta>=t.life&&(t.remove=!0)};y.createObjectFromDelta=(t,e,i)=>{let h=(0,x.clone)(t);return g(h,e,i),h},Object.defineProperty(s,"Shake",{enumerable:!0,get:function(){return y.Shake}});var w={};Object.defineProperty(w,"__esModule",{value:!0}),w.GameStateStack=void 0,w.GameStateStack=class{constructor(t=3e3){this.states=[],this.stackDelta=0,this.maxStackSize=t}addState(t){p(t,this)}hasOlderState(){return v(this)}getPreviousState(){return u(this)}hasNewerState(){return f(this)}getNextState(){return b(this)}popStateFromStack(){return m(this)}};const p=(t,e)=>{e.stackDelta=0,e.states.push(t),e.states.length>e.maxStackSize&&e.states.shift()},u=t=>{if(t.hasOlderState()){t.stackDelta=t.stackDelta+3;let e=t.states.length-t.stackDelta;return e<0&&(t.stackDelta=t.states.length,e=t.stackDelta),t.states[e]}return null},f=t=>t.stackDelta>1,v=t=>t.stackDelta+3<=t.states.length,m=t=>{for(let e=0;e<3&&t.states.length>1;e++)t.states.pop();t.stackDelta=0;let e=t.states.length-1;return t.states[e]},b=t=>{if(t.hasNewerState()){t.stackDelta=t.stackDelta-1;let e=t.states.length-t.stackDelta;return t.states[e]}return null};Object.defineProperty(s,"GameStateStack",{enumerable:!0,get:function(){return w.GameStateStack}});var S={};Object.defineProperty(S,"__esModule",{value:!0}),S.Particle=void 0;var x=h("i1tWs");class P extends x.BasicObject{constructor(t,e,i,h,a,r,s,l,d,o,n,y,x,c){super(t,e,i,h),this.sourceX=0,this.sourceY=0,this.sourceWidth=0,this.sourceHeight=0,this.xAcceleration=0,this.yAcceleration=0,this.alive=!0,this.originalRenderX=t,this.originalRenderY=e,this.renderWidth=i,this.renderHeight=h,this.renderX=t-this.renderWidth/2,this.renderY=e-this.renderHeight/2,this.vectorX=s,this.vectorY=l,//this.xAcceleration = xAcceleration;
//this.yAcceleration = yAcceleration;
this.lifeDelta=0,this.lifetimeInSeconds=c,this.initialWidth=i,this.initialHeight=h,this.finalWidth=a,this.finalHeight=r,this.opacity=d,this.initialOpacity=d,this.finalOpacity=o,this.red=n,this.green=y,this.blue=x}applyDelta(t,e){this.lifeDelta+=e,this.lifeDelta>this.lifetimeInSeconds&&(this.alive=!1),this.obeysGravity,super.applyDelta(t,e),this.renderX=this.x,this.renderY=this.y;let i=this.lifeDelta/this.lifetimeInSeconds;this.width=this.renderWidth=this.initialWidth+(this.finalWidth-this.initialWidth)*i,this.height=this.renderHeight=this.initialHeight+(this.finalHeight-this.initialHeight)*i,this.obeysGravity,this.opacity=this.initialOpacity+(this.finalOpacity-this.initialOpacity)*i,this.colour=`rgba(${this.red},${this.green},${this.blue},${this.opacity})`}}S.Particle=P,Object.defineProperty(s,"Particle",{enumerable:!0,get:function(){return S.Particle}});var x=h("i1tWs");Object.defineProperty(s,"BasicObject",{enumerable:!0,get:function(){return x.BasicObject}});var C=h("2Ru5L");Object.defineProperty(s,"PhysicsObject",{enumerable:!0,get:function(){return C.PhysicsObject}}),Object.defineProperty(s,"createFullSizeCanvasAndReturnWith2DContextAndResizeCallback",{enumerable:!0,get:function(){return h("jjjrG").createFullSizeCanvasAndReturnWith2DContextAndResizeCallback}});const O=o(h("jjjrG"));s.Canvas=O;//import * as Physics from "./physics/physics";
const D=o(h("5PnyD"));s.Collisions=D;const R=o(h("gLy79"));s.PhysicsCollisions=R;const k=o(h("cYJ8Y"));s.Pipeline=k;const A=o(h("kcfDG"));s.Runners=A;const j=o(h("1Qh2U"));s.Renderer=j;const M=()=>new W({x:150,y:350,height:32,width:51.2},{x:70,y:200,height:64,width:64});//12.5*PTM_RATIO;
class _ extends s.BasicObject{constructor(t,e,i,h){super(t,e,i,h),this.positionHistory=[],this.onTheGround=!1,this.alive=!0,this.lastDelta=0}applyDelta(t,e){this.lastDelta=e,super.applyDelta(t,e)}}class F extends s.BasicObject{constructor(t,e,i,h){super(t,e,i,h),this.onTheGround=!1,this.alive=!0,this.positionHistory=[]}}class W{constructor(t,e){this.clicked=()=>{if(0===this.leader.vectorX){this.leader.vectorX=400;let t=this.leader.x;for(;t>this.follower.x;)this.leader.positionHistory.unshift({x:t,y:this.leader.y}),t-=400*this.leader.lastDelta}else this.currentCombinedJumps<2&&(this.currentCombinedJumps++,this.leader.vectorY<0&&(this.leader.vectorY=0),this.leader.vectorY+=400,//this.leader.vectorY = jumpVelocityY;
this.leader.onTheGround=!1)},this.landed=()=>{this.leader.onTheGround=!0,this.currentCombinedJumps=0},this.leader=new _(t.x,t.y,t.width,t.height),this.follower=new F(e.x,e.y,e.width,e.height),this.vortex=new F(e.x+e.width/2,e.y,e.width/2,e.height),this.vortex.alive=!1,this.currentCombinedJumps=2,this.leader.colour="#D10000",this.follower.colour="#D10000"}}const H=()=>({platforms:[],obstacles:[],player:M(),camera:void 0,particles:[],snowClouds:[],snowFall:void 0,shakes:[],world:{gravity:1280,minVerticalVelocityPerSecond:-2560,gravityAccelerationPerSecond:-1280}}),T={platforms:[{x:-1472,y:512,width:7552,height:128},{x:7072,y:448,width:7168,height:192},{x:14432,y:384,width:320,height:256},{x:14944,y:320,width:384,height:320},{x:15488,y:416,width:384,height:224},{x:16032,y:512,width:576,height:128},{x:16960,y:352,width:800,height:288},{x:17856,y:512,width:1152,height:128},{x:6304,y:512,width:736,height:128},{x:19136,y:512,width:4768,height:128},{x:24064,y:512,width:7808,height:128}],obstacles:[{x:0,y:640,width:224,height:256},{x:6048,y:640,width:288,height:256},{x:14208,y:640,width:288,height:256},{x:14624,y:640,width:448,height:256},{x:15328,y:640,width:992,height:256},{x:16576,y:640,width:1344,height:256},{x:18976,y:640,width:192,height:256},{x:11936,y:384,width:64,height:64},{x:8928,y:320,width:64,height:128},{x:11584,y:224,width:64,height:64},{x:10752,y:384,width:64,height:64},{x:19936,y:448,width:64,height:64},{x:20672,y:448,width:64,height:64},{x:23264,y:448,width:64,height:64},{x:23840,y:640,width:256,height:256},{x:2368,y:448,width:64,height:64},{x:3968,y:448,width:64,height:64},{x:4864,y:448,width:64,height:64},{x:22336,y:448,width:64,height:64},{x:21472,y:448,width:64,height:64},{x:13344,y:320,width:64,height:128},{x:25728,y:384,width:64,height:128},{x:27360,y:384,width:64,height:128},{x:28288,y:448,width:64,height:64},{x:31840,y:640,width:160,height:256},{x:6912,y:640,width:288,height:256}],loadPoint:[{x:29984,y:0,width:32,height:32}]},X={obstacles:[{x:0,y:640,width:224,height:256},{x:4736,y:640,width:416,height:256},{x:5344,y:640,width:256,height:256},{x:6688,y:640,width:256,height:256},{x:13088,y:640,width:160,height:256},{x:14112,y:640,width:224,height:256},{x:14592,y:640,width:288,height:256},{x:16256,y:640,width:992,height:256},{x:17792,y:640,width:448,height:256},{x:19680,y:640,width:448,height:256},{x:24992,y:384,width:64,height:128},{x:2400,y:448,width:64,height:64},{x:768,y:448,width:64,height:64},{x:1856,y:448,width:64,height:64},{x:1312,y:448,width:64,height:64},{x:4032,y:448,width:64,height:64},{x:3488,y:448,width:64,height:64},{x:2944,y:448,width:64,height:64},{x:18688,y:448,width:64,height:64},{x:19680,y:448,width:64,height:64},{x:20832,y:448,width:64,height:64},{x:21376,y:448,width:64,height:64},{x:21920,y:448,width:64,height:64},{x:22464,y:448,width:64,height:64},{x:23008,y:448,width:64,height:64},{x:23552,y:448,width:64,height:64},{x:8096,y:480,width:64,height:64},{x:7552,y:480,width:64,height:64},{x:10368,y:448,width:64,height:64},{x:9824,y:448,width:64,height:64},{x:10912,y:448,width:64,height:64},{x:12320,y:448,width:64,height:64},{x:11776,y:448,width:64,height:64},{x:26176,y:384,width:64,height:128},{x:27264,y:384,width:64,height:128},{x:28160,y:448,width:64,height:64},{x:28928,y:448,width:64,height:64},{x:31872,y:640,width:128,height:256},{x:25888,y:640,width:320,height:256},{x:24096,y:640,width:288,height:256},{x:15680,y:640,width:224,height:256},{x:15136,y:640,width:288,height:256},{x:9184,y:640,width:160,height:256},{x:6112,y:640,width:256,height:256}],platforms:[{x:64,y:512,width:4704,height:128},{x:4896,y:448,width:480,height:192},{x:5536,y:384,width:640,height:256},{x:13184,y:320,width:960,height:320},{x:14304,y:320,width:320,height:320},{x:14784,y:320,width:384,height:320},{x:15328,y:320,width:384,height:320},{x:15872,y:512,width:608,height:128},{x:16608,y:512,width:320,height:128},{x:17088,y:512,width:800,height:128},{x:18080,y:512,width:1664,height:128},{x:19872,y:512,width:4288,height:128},{x:24320,y:512,width:1600,height:128},{x:6272,y:448,width:480,height:192},{x:6848,y:544,width:2368,height:96},{x:9312,y:512,width:3808,height:128},{x:26176,y:512,width:5728,height:128}]},Y={obstacles:[{x:0,y:640,width:224,height:256},{x:7040,y:640,width:448,height:256},{x:16512,y:640,width:384,height:256},{x:18912,y:640,width:448,height:256},{x:24992,y:384,width:64,height:128},{x:3904,y:448,width:64,height:64},{x:4032,y:384,width:64,height:128},{x:18880,y:448,width:64,height:64},{x:18976,y:384,width:64,height:128},{x:20832,y:448,width:64,height:64},{x:21376,y:448,width:64,height:64},{x:21920,y:448,width:64,height:64},{x:22464,y:448,width:64,height:64},{x:23008,y:448,width:64,height:64},{x:23552,y:448,width:64,height:64},{x:8672,y:416,width:64,height:128},{x:7584,y:416,width:64,height:128},{x:26176,y:384,width:64,height:128},{x:27264,y:384,width:64,height:128},{x:28160,y:448,width:64,height:64},{x:28928,y:448,width:64,height:64},{x:31872,y:640,width:128,height:256},{x:25888,y:640,width:320,height:256},{x:23584,y:640,width:640,height:256},{x:15840,y:640,width:224,height:256},{x:9184,y:640,width:160,height:256},{x:6464,y:640,width:256,height:256},{x:2048,y:96,width:64,height:64},{x:4352,y:640,width:416,height:256},{x:3904,y:640,width:320,height:256},{x:2400,y:640,width:384,height:256},{x:1792,y:640,width:288,height:256},{x:6624,y:384,width:64,height:64},{x:11872,y:384,width:64,height:128},{x:13216,y:384,width:64,height:64},{x:10464,y:640,width:448,height:288},{x:12032,y:640,width:160,height:288},{x:13248,y:640,width:224,height:256},{x:14592,y:640,width:448,height:256},{x:15808,y:384,width:64,height:128},{x:17696,y:384,width:64,height:64},{x:17824,y:384,width:64,height:128},{x:13440,y:256,width:64,height:64}],platforms:[{x:64,y:512,width:1024,height:128},{x:13440,y:320,width:960,height:320},{x:14400,y:256,width:288,height:384},{x:16832,y:448,width:928,height:192},{x:17760,y:512,width:1280,height:128},{x:19328,y:512,width:4288,height:128},{x:24192,y:512,width:1792,height:128},{x:6624,y:448,width:736,height:192},{x:7456,y:544,width:2240,height:96},{x:9696,y:416,width:864,height:224},{x:26176,y:512,width:5728,height:128},{x:1088,y:352,width:736,height:288},{x:2048,y:160,width:448,height:480},{x:2720,y:512,width:1376,height:128},{x:4192,y:288,width:352,height:352},{x:10688,y:288,width:64,height:352},{x:10880,y:512,width:1184,height:128},{x:12160,y:512,width:1056,height:128},{x:13216,y:448,width:64,height:192},{x:14912,y:512,width:1632,height:128},{x:4672,y:384,width:1856,height:256}]},L={obstacles:[{x:0,y:640,width:224,height:320},{x:4864,y:640,width:416,height:320},{x:12800,y:640,width:384,height:320},{x:14080,y:640,width:288,height:320},{x:14624,y:640,width:352,height:320},{x:15296,y:640,width:320,height:320},{x:16768,y:640,width:1632,height:320},{x:9440,y:384,width:64,height:64},{x:8928,y:384,width:64,height:64},{x:8416,y:384,width:64,height:64},{x:10656,y:384,width:64,height:64},{x:10752,y:320,width:64,height:128},{x:12096,y:384,width:64,height:64},{x:22816,y:448,width:64,height:64},{x:20128,y:448,width:64,height:64},{x:20672,y:448,width:64,height:64},{x:21760,y:384,width:64,height:128},{x:23360,y:448,width:64,height:64},{x:23904,y:448,width:64,height:64},{x:1600,y:640,width:192,height:320},{x:2816,y:640,width:128,height:320},{x:3488,y:480,width:64,height:64},{x:3648,y:480,width:64,height:64},{x:6112,y:416,width:64,height:128},{x:7136,y:640,width:544,height:352},{x:18656,y:640,width:640,height:320},{x:21792,y:640,width:384,height:320},{x:15936,y:640,width:320,height:320},{x:30432,y:640,width:448,height:320},{x:29408,y:640,width:384,height:320},{x:26752,y:640,width:384,height:320},{x:25088,y:448,width:64,height:64},{x:25536,y:448,width:64,height:64},{x:26048,y:448,width:64,height:64},{x:31840,y:640,width:160,height:320},{x:23936,y:640,width:256,height:320},{x:3968,y:480,width:64,height:64},{x:3808,y:480,width:64,height:64},{x:4736,y:480,width:64,height:64},{x:5184,y:480,width:64,height:64},{x:4896,y:480,width:64,height:64},{x:9952,y:384,width:64,height:64},{x:11840,y:320,width:64,height:128},{x:11744,y:384,width:64,height:64},{x:16224,y:448,width:64,height:64},{x:15424,y:320,width:64,height:128},{x:14752,y:352,width:64,height:64}],platforms:[{x:32,y:512,width:1600,height:128},{x:1760,y:448,width:1088,height:192},{x:7648,y:448,width:5184,height:192},{x:13152,y:448,width:960,height:192},{x:14336,y:384,width:320,height:256},{x:14944,y:384,width:384,height:256},{x:15584,y:320,width:384,height:320},{x:16224,y:512,width:576,height:128},{x:17184,y:512,width:320,height:128},{x:18368,y:512,width:320,height:128},{x:19264,y:512,width:2560,height:128},{x:22144,y:512,width:1824,height:128},{x:24160,y:512,width:2624,height:128},{x:2912,y:544,width:2048,height:96},{x:5120,y:544,width:2048,height:96},{x:27104,y:512,width:2336,height:128},{x:29760,y:512,width:704,height:128},{x:30848,y:512,width:1024,height:128},{x:24960,y:192,width:1408,height:64},{x:17760,y:512,width:320,height:128},{x:15424,y:448,width:64,height:192},{x:14752,y:416,width:64,height:224}]},I={obstacles:[{x:0,y:640,width:224,height:256},{x:7264,y:640,width:576,height:256},{x:16512,y:640,width:384,height:256},{x:24992,y:384,width:64,height:128},{x:3488,y:448,width:64,height:64},{x:3616,y:384,width:64,height:128},{x:18880,y:448,width:64,height:64},{x:19200,y:448,width:64,height:64},{x:20416,y:448,width:64,height:64},{x:21920,y:448,width:64,height:64},{x:22464,y:448,width:64,height:64},{x:23008,y:448,width:64,height:64},{x:23328,y:448,width:64,height:64},{x:8672,y:384,width:64,height:128},{x:26176,y:384,width:64,height:128},{x:27392,y:384,width:64,height:128},{x:28320,y:448,width:64,height:64},{x:28640,y:448,width:64,height:64},{x:31872,y:640,width:128,height:256},{x:25888,y:640,width:320,height:256},{x:23040,y:640,width:1184,height:256},{x:6016,y:640,width:704,height:192},{x:2144,y:640,width:704,height:192},{x:1056,y:640,width:736,height:256},{x:12160,y:448,width:64,height:64},{x:10464,y:640,width:1568,height:288},{x:12032,y:640,width:1920,height:288},{x:15040,y:384,width:64,height:128},{x:17696,y:384,width:64,height:64},{x:17824,y:384,width:64,height:128},{x:4544,y:448,width:64,height:64},{x:4864,y:448,width:64,height:64},{x:12352,y:448,width:64,height:64},{x:15232,y:384,width:64,height:128},{x:16544,y:384,width:64,height:128},{x:16832,y:384,width:64,height:64},{x:19328,y:448,width:64,height:64},{x:13920,y:448,width:64,height:64},{x:22144,y:640,width:352,height:256},{x:20448,y:640,width:416,height:256},{x:21184,y:640,width:448,height:256},{x:28480,y:448,width:64,height:64},{x:27296,y:384,width:64,height:128}],platforms:[{x:64,y:512,width:1024,height:128},{x:13920,y:512,width:2688,height:128},{x:16832,y:448,width:928,height:192},{x:17760,y:512,width:2720,height:128},{x:23680,y:512,width:2240,height:128},{x:6688,y:512,width:608,height:128},{x:7808,y:512,width:2688,height:128},{x:26176,y:512,width:5728,height:128},{x:1728,y:512,width:448,height:128},{x:2816,y:512,width:3232,height:128},{x:10880,y:512,width:96,height:128},{x:11360,y:512,width:96,height:128},{x:11840,y:512,width:128,height:128},{x:12128,y:512,width:96,height:128},{x:20832,y:512,width:384,height:128},{x:21600,y:512,width:576,height:128},{x:12320,y:512,width:96,height:128},{x:12832,y:512,width:96,height:128},{x:13344,y:512,width:96,height:128},{x:22464,y:512,width:608,height:128},{x:23328,y:512,width:64,height:128}]},G={obstacles:[{x:0,y:640,width:224,height:320},{x:4672,y:640,width:736,height:320},{x:6112,y:640,width:256,height:320},{x:7264,y:640,width:448,height:320},{x:12800,y:640,width:320,height:320},{x:14016,y:640,width:352,height:320},{x:14624,y:640,width:352,height:320},{x:15296,y:640,width:320,height:320},{x:16768,y:640,width:448,height:320},{x:17472,y:640,width:544,height:320},{x:18880,y:640,width:416,height:320},{x:25120,y:640,width:416,height:320},{x:9760,y:448,width:64,height:64},{x:9056,y:384,width:64,height:64},{x:8288,y:384,width:64,height:64},{x:9952,y:160,width:64,height:64},{x:10464,y:192,width:64,height:64},{x:10752,y:448,width:64,height:64},{x:11488,y:384,width:64,height:64},{x:12128,y:384,width:64,height:64},{x:22816,y:448,width:64,height:64},{x:20128,y:448,width:64,height:64},{x:20672,y:448,width:64,height:64},{x:21760,y:384,width:64,height:128},{x:24448,y:448,width:64,height:64},{x:23136,y:448,width:64,height:64},{x:23904,y:448,width:64,height:64},{x:928,y:384,width:64,height:128},{x:1056,y:384,width:64,height:128},{x:2048,y:448,width:64,height:64},{x:4640,y:256,width:64,height:64},{x:15936,y:640,width:320,height:320},{x:26176,y:640,width:288,height:320},{x:26976,y:640,width:224,height:320},{x:28128,y:640,width:352,height:320},{x:28544,y:640,width:320,height:320},{x:29280,y:640,width:864,height:320},{x:14688,y:480,width:64,height:64},{x:8064,y:96,width:64,height:64},{x:17984,y:448,width:64,height:64},{x:27648,y:192,width:64,height:64},{x:31936,y:640,width:64,height:320},{x:30336,y:640,width:576,height:320},{x:22912,y:448,width:64,height:64},{x:23008,y:384,width:64,height:128},{x:18976,y:352,width:64,height:64},{x:15584,y:320,width:64,height:64},{x:12128,y:128,width:64,height:64}],platforms:[{x:32,y:512,width:3008,height:128},{x:3040,y:448,width:512,height:192},{x:5184,y:320,width:960,height:320},{x:6336,y:128,width:960,height:512},{x:7648,y:448,width:2080,height:192},{x:13088,y:448,width:960,height:192},{x:14336,y:384,width:320,height:256},{x:14944,y:320,width:384,height:320},{x:15584,y:384,width:384,height:256},{x:16224,y:512,width:576,height:128},{x:17184,y:512,width:320,height:128},{x:17984,y:512,width:960,height:128},{x:19264,y:512,width:5888,height:128},{x:3552,y:384,width:544,height:256},{x:4096,y:320,width:608,height:320},{x:9248,y:160,width:608,height:64},{x:10080,y:192,width:352,height:64},{x:10560,y:192,width:704,height:64},{x:11456,y:128,width:640,height:64},{x:13248,y:-96,width:1504,height:64},{x:14976,y:-192,width:13344,height:64},{x:25504,y:576,width:352,height:64},{x:25856,y:512,width:352,height:128},{x:26432,y:448,width:576,height:192},{x:27168,y:320,width:480,height:320},{x:27648,y:256,width:512,height:384},{x:28448,y:160,width:128,height:480},{x:28832,y:512,width:480,height:128},{x:14656,y:544,width:96,height:96},{x:9856,y:448,width:864,height:192},{x:9728,y:512,width:128,height:128},{x:10720,y:512,width:128,height:128},{x:10848,y:448,width:1984,height:192},{x:30016,y:512,width:352,height:128},{x:30880,y:512,width:352,height:128},{x:31360,y:512,width:608,height:128},{x:31232,y:576,width:128,height:64},{x:18944,y:416,width:96,height:224},{x:12224,y:128,width:608,height:64}]},z={obstacles:[{x:0,y:640,width:224,height:320},{x:1760,y:448,width:64,height:64},{x:1792,y:640,width:480,height:320},{x:4e3,y:192,width:64,height:64},{x:6784,y:128,width:64,height:128},{x:7872,y:192,width:64,height:64},{x:8e3,y:192,width:64,height:64},{x:8096,y:192,width:64,height:64},{x:8224,y:192,width:64,height:64},{x:9760,y:128,width:64,height:128},{x:9952,y:192,width:64,height:64},{x:10720,y:128,width:64,height:128},{x:10816,y:192,width:64,height:64},{x:12064,y:480,width:64,height:64},{x:12544,y:480,width:64,height:64},{x:13024,y:480,width:64,height:64},{x:13504,y:480,width:64,height:64},{x:13952,y:640,width:192,height:320},{x:14464,y:480,width:64,height:64},{x:15456,y:480,width:64,height:64},{x:14912,y:640,width:192,height:320},{x:16512,y:480,width:64,height:64},{x:15968,y:640,width:128,height:320},{x:16992,y:640,width:128,height:320},{x:17632,y:480,width:64,height:64},{x:18080,y:640,width:128,height:320},{x:18720,y:480,width:64,height:64},{x:19136,y:640,width:320,height:320},{x:19936,y:480,width:64,height:64},{x:21280,y:480,width:64,height:64},{x:20480,y:640,width:320,height:320},{x:22624,y:480,width:64,height:64},{x:21824,y:640,width:320,height:320},{x:23968,y:480,width:64,height:64},{x:23168,y:640,width:320,height:320},{x:25440,y:416,width:64,height:128},{x:24512,y:640,width:320,height:320},{x:29440,y:480,width:64,height:64},{x:31936,y:640,width:64,height:320},{x:30752,y:640,width:192,height:320},{x:29664,y:640,width:384,height:320},{x:28448,y:640,width:576,height:320},{x:25536,y:416,width:64,height:128},{x:25632,y:416,width:64,height:128},{x:26368,y:480,width:64,height:64},{x:26528,y:480,width:64,height:64},{x:26656,y:480,width:64,height:64},{x:26816,y:480,width:64,height:64},{x:27904,y:480,width:64,height:64},{x:27744,y:480,width:64,height:64},{x:27456,y:480,width:64,height:64},{x:27616,y:480,width:64,height:64}],platforms:[{x:32,y:512,width:1792,height:128},{x:2176,y:544,width:11808,height:96},{x:1920,y:416,width:320,height:64},{x:2752,y:288,width:736,height:64},{x:3552,y:256,width:960,height:64},{x:4608,y:224,width:352,height:64},{x:5024,y:160,width:320,height:64},{x:5504,y:96,width:384,height:64},{x:5984,y:256,width:864,height:64},{x:7072,y:256,width:1792,height:64},{x:9216,y:256,width:1824,height:64},{x:14112,y:544,width:832,height:96},{x:15072,y:544,width:896,height:96},{x:16096,y:544,width:896,height:96},{x:17120,y:544,width:960,height:96},{x:18208,y:544,width:960,height:96},{x:19424,y:544,width:1088,height:96},{x:20768,y:544,width:1088,height:96},{x:22112,y:544,width:1088,height:96},{x:23456,y:544,width:1088,height:96},{x:24800,y:544,width:4064,height:96},{x:28992,y:544,width:704,height:96},{x:30016,y:544,width:768,height:96},{x:30912,y:544,width:1056,height:96}]},B=new class{constructor(){this.levels=[],this.getPlatformsForLevel=(t,e,i)=>{let h=[];for(let a of this.levels[t].platforms){let t=new s.BasicObject(.5*a.x+e,(i.frameHeight-a.height-a.y)*.5,.5*a.width,.5*a.height);t.colour="#3A980B",h.push(t)}return h},this.getObstaclesForLevel=(t,e,i)=>{let h=[];for(let a of this.levels[t].obstacles){let t=new s.BasicObject(.5*a.x+e,(i.frameHeight-a.height-a.y)*.5,.5*a.width,.5*a.height);t.colour="#D10000",h.push(t)}return h},this.levels.push(T),this.levels.push(X),this.levels.push(Y),this.levels.push(L),this.levels.push(I),this.levels.push(G),this.levels.push(z)}},V=()=>B;class E{constructor(t){this.particles=[],this.lastParticleDelta=0,this.nextParticleDueAt=0,this.createNewParticle=t=>{//let x = camera.x + ctx.canvas.width*3 * Math.random();
let e=t.x+3*t.frameWidth*Math.random(),i=t.frameHeight+50,h=5+5*Math.random(),a=new s.Particle(e,i,h,h,h,h,-40+-40*Math.random(),-30*Math.random(),1,1,255,255,255,200);return a.gravityScale=.05+.15*Math.random(),a};for(let e=0;e<40;e++){//let x = ctx.canvas.width * Math.random();
let e=2500*Math.random(),i=(t.frameHeight+50)*Math.random(),h=-40+-40*Math.random(),a=-30*Math.random(),r=.05+.15*Math.random(),l=5+5*Math.random(),d=new s.Particle(e,i,l,l,l,l,h,a,1,1,255,255,255,200);d.gravityScale=r,this.particles.push(d)}}applyDelta(t,e,i){for(let i=this.particles.length-1;i>=0;i--){let h=this.particles[i];h.applyDelta(t,e),h.alive||this.particles.splice(i,1)}this.lastParticleDelta>=this.nextParticleDueAt&&(this.lastParticleDelta=0,this.nextParticleDueAt=.02*Math.random(),this.particles.push(this.createNewParticle(i))),this.particles.length>500&&this.particles.splice(0,this.particles.length-500),this.lastParticleDelta+=e}}class N{constructor(){this.xOffset=-200,this.yOffset=0,this.executeDelta=(t,e)=>{e.canvasContext;let i=e.gameState,h={x:i.player.leader.x+this.xOffset,y:this.yOffset//gs.player.leader.y + this.yOffset
},a={x:h.x,y:h.y};i.shakes.forEach(t=>{a.x+=t.x,a.y+=t.y}),i.camera&&(i.camera.x=h.x,i.camera.y=h.y,i.camera.frameX=a.x,i.camera.frameY=a.y)}}}class ${constructor(){this.lastLevelLoadedAtX=0,this.currentLevelIndex=0,this.executeDelta=(t,e)=>{e.canvasContext;let i=e.gameState;for(let t=i.platforms.length-1;t>=0;t--){let e=i.platforms[t];e.x+e.width<i.camera.x-2e3&&(i.platforms.splice(t,1),console.log(`${i.platforms.length} loaded platforms`))}i.camera.x%16e3>14e3&&this.lastLevelLoadedAtX<i.camera.x-3e3&&(this.lastLevelLoadedAtX=i.camera.x,this.loadNextLevel(i))},this.loadNextLevel=t=>{let e=t.camera;this.currentLevelIndex+=1;let i=this.currentLevelIndex;this.currentLevelIndex>6&&(i=6*Math.random()+1),console.log(`Loading level ${i}`);let h=V().getPlatformsForLevel(i,16e3*this.currentLevelIndex,e),a=V().getObstaclesForLevel(i,16e3*this.currentLevelIndex,e);console.log(`Loaded ${a.length} obstacles and ${h.length} plastforms`),t.platforms.push(...h),t.obstacles.push(...a)}}}class J{constructor(){this.executeDelta=(t,e)=>{e.canvasContext;let i=e.gameState;for(let t=0;t<i.platforms.length;t++){let e=i.platforms[t];e.x,i.player.leader.x,e.x,e.width,i.player.leader.x,(0,s.PhysicsCollisions).doAabbsOverlap(i.player.leader,e)&&((0,s.PhysicsCollisions).checkImpactSideOfMovingAabbOnStaticAabb(i.player.leader,e),i.player.leader.alive&&(0,s.PhysicsCollisions).checkImpactSideOfMovingAabbOnStaticAabb(i.player.leader,e)!==s.PhysicsCollisions.CollisionSide.Top?i.player.leader.alive=!1:(0,s.PhysicsCollisions).checkImpactSideOfMovingAabbOnStaticAabb(i.player.leader,e)===s.PhysicsCollisions.CollisionSide.Top&&(i.player.leader.onTheGround||i.player.landed(),i.player.leader.y=e.y+e.height,i.player.leader.vectorY=0)),(0,s.PhysicsCollisions).doAabbsOverlap(i.player.follower,e)&&(i.player.follower.alive&&(0,s.PhysicsCollisions).checkImpactSideOfMovingAabbOnStaticAabb(i.player.follower,e)!==s.PhysicsCollisions.CollisionSide.Top||(0,s.PhysicsCollisions).checkImpactSideOfMovingAabbOnStaticAabb(i.player.follower,e)===s.PhysicsCollisions.CollisionSide.Top&&(i.player.follower.onTheGround||(i.player.follower.onTheGround=!0),i.player.follower.y=e.y+e.height,i.player.follower.vectorY=0))}for(let t=0;t<i.obstacles.length;t++){let e=i.obstacles[t];e.x,i.player.leader.x,e.x,e.width,i.player.leader.x,(0,s.PhysicsCollisions).doAabbsOverlap(i.player.leader,e)&&i.player.leader.alive&&(i.player.leader.alive=!1)}}}}class U{constructor(){this.executeDelta=(t,e)=>{let i=e.gameState;if(!i.player.leader.alive&&!i.player.follower.alive){i.player.vortex.alive=!1;return}if(i.player.leader.alive&&(i.player.leader.applyDelta(e.gameState.world,t),i.player.leader.renderX=i.player.leader.x,i.player.leader.renderY=i.player.leader.y),0==i.player.leader.vectorX)i.player.follower.applyDelta(e.gameState.world,t),i.player.follower.renderX=i.player.follower.x,i.player.follower.renderY=i.player.follower.y;else{let t=i.player.follower,h=i.player.leader,a=i.player.vortex;if(h.positionHistory.length>0){i.player.leader.alive&&h.positionHistory.push({x:h.x,y:h.y}),t.xPrevious=t.x,t.yPrevious=t.y;let e=h.positionHistory.shift();if(void 0!==e&&(h.alive?t.x=h.x-80:t.x=e.x,t.y=e.y,t.renderX=t.x,t.renderY=t.y,t.positionHistory.push(e)),i.player.follower.positionHistory.length>=i.player.leader.positionHistory.length/2&&(i.player.vortex.alive=!0),i.player.vortex.alive){let e=t.positionHistory.shift();void 0!==e&&(a.x=e.x,a.y=e.y,a.renderX=a.x,a.renderY=a.y)}}else t.alive=!1,//tempData['snow'] = {x:gs.player.leader.x + (gs.player.leader.width/2), y: gs.player.leader.y + (gs.player.leader.height/2) };
e.snow={x:i.player.leader.x,y:i.player.leader.y+i.player.leader.height/2}}}}}class q{constructor(){this.xVectorImpact=12//20;
,this.yVectorImpact=30//50;
,this.executeDelta=(t,e)=>{e.canvasContext;let i=e.gameState;if(i.player.vortex.alive&&i.snowFall)for(let t=0;t<i.snowFall.particles.length;t++){let e=i.snowFall.particles[t];(0,s.PhysicsCollisions).doAabbsOverlap(i.player.leader,e)&&(e.vectorX+=Math.random()*this.xVectorImpact,e.vectorY+=Math.random()*this.yVectorImpact);/*
				if(CollisionUtils.doAabbsOverlap(gs.player.vortex, p)){
					p.vectorX += Math.random() * this.xVectorImpact;
					p.vectorY += Math.random() * this.yVectorImpact;
				}*/}}}}class Q{constructor(t,e){this.particles=[];for(let i=0;i<70;i++){let i=40+80*Math.random(),h=i/2.5,a=.5+.5*Math.random(),r=.2+.4*Math.random(),l=500*Math.random()-250,d=500*Math.random()-250,o=new s.Particle(t,e,h,h,i,i,l,d,a,0,255,255,255,r);o.obeysGravity=!1,o.circle=!0,this.particles.push(o)}for(let i=0;i<45;i++){let i=5+5*Math.random(),h=-200+400*Math.random(),a=100+300*Math.random(),r=new s.Particle(t,e,i,i,i,i,h,a,1,1,255,255,255,30);r.gravityScale=.2,this.particles.push(r)}}applyDelta(t,e){for(let i=this.particles.length-1;i>=0;i--){let h=this.particles[i];h.applyDelta(t,e),h.alive||this.particles.splice(i,1)}}}class K{constructor(){this.executeDelta=(t,e)=>{e.canvasContext;let i=e.gameState;if(e.snow){let t=e.snow;i.snowClouds.push(new Q(t.x,t.y)),i.shakes.push(new s.Shake(3,.8))}for(let e=i.snowClouds.length-1;e>=0;e--){let h=i.snowClouds[0];if(h.particles.length>0){for(let e of(h.applyDelta(i.world,t),h.particles))if(e.obeysGravity){for(let t of i.platforms)if((0,s.PhysicsCollisions).doAabbsOverlap(e,t)){(0,s.PhysicsCollisions).doesAabbOverlapOccurInCurrentDelta(e,t)||(e.alive=!1);let i=(0,s.PhysicsCollisions).checkImpactSideOfMovingAabbOnStaticAabb(e,t);i===s.PhysicsCollisions.CollisionSide.Top?(e.vectorX=0,e.vectorY=0,e.y=t.y+t.height):i===s.PhysicsCollisions.CollisionSide.Bottom?(e.vectorY=0,e.y=t.y-e.height):i===s.PhysicsCollisions.CollisionSide.Right?(e.vectorX=0,e.x=t.x+t.width):(e.vectorX=0,e.x=t.x-e.width)}}}else i.snowClouds.splice(e,1)}}}}class Z{constructor(){this.executeDelta=(t,e)=>{e.canvasContext;let i=e.gameState,h=i.snowFall;if(h&&h.particles.length>0){for(let e of(h.applyDelta(i.world,t,i.camera),h.particles))if(e.obeysGravity){for(let t of i.platforms)if((0,s.PhysicsCollisions).doAabbsOverlap(e,t)){//if(!CollisionUtils.doesAabbOverlapOccurInCurrentDelta(p, platform)){
//p.alive = false;
//}
let i=(0,s.PhysicsCollisions).checkImpactSideOfMovingAabbOnStaticAabb(e,t);i===s.PhysicsCollisions.CollisionSide.Top?(e.vectorX=0,e.vectorY=0,e.y=t.y+t.height):i===s.PhysicsCollisions.CollisionSide.Bottom?(e.vectorY=0,e.y=t.y-e.height):i===s.PhysicsCollisions.CollisionSide.Right?(e.vectorX=0,e.x=t.x+t.width):(e.vectorX=0,e.x=t.x-e.width)}}}}}}class tt{constructor(t){this.executeDelta=(t,e)=>{let i=e.canvasContext;i.beginPath(),i.fillStyle=this.color,i.fillRect(0,0,i.canvas.width,i.canvas.height)},this.color=t}}class te{constructor(){this.direction=1,this.x=130,this.minX=100,this.maxX=200,this.executeDelta=(t,e)=>{let i=e.canvasContext;i.setTransform(1,0,0,1,0,0),i.clearRect(0,0,i.canvas.width,i.canvas.height)}}}const ti=(t,e)=>{let i=t.canvasContext,h=t.gameState,a=h.camera;e.forEach(t=>{!(t.renderX>a.x+a.frameWidth)&&(t.renderX+t.renderWidth<a.x||(t.circle?(0,s.Renderer).renderCircle(t,a,i):(0,s.Renderer).renderRect(t,a,i)))})};class th{executeDelta(t,e){let i=e.gameState;i.obstacles&&ti(e,i.obstacles)}}class ta{executeDelta(t,e){let i=e.gameState;i.platforms&&ti(e,i.platforms)}}class tr{executeDelta(t,e){let i=e.canvasContext;i.fillStyle="#D10000";let h=e.gameState,a=h.camera;if(!h.player.leader.alive&&!h.player.follower.alive)return;i.beginPath();//renderSprite(gs.player.leader, ctx, camera);
//renderSprite(gs.player.follower, ctx, camera);
let r=ts(h.player.leader.vectorY,Math.abs(h.world.minVerticalVelocityPerSecond));//make the angle relative to X velocity
r*=h.player.leader.vectorX/400,(0,s.Renderer).renderRotatedRect(h.player.leader,r,a,i);let l=ts((h.player.follower.y-h.player.follower.yPrevious)/t,Math.abs(h.world.minVerticalVelocityPerSecond)),d=(h.player.follower.x-h.player.follower.xPrevious)/t;l*=d/400,(0,s.Renderer).renderRotatedRect(h.player.follower,l,a,i);//renderRect(gs.player.vortex, camera, ctx);
}}const ts=(t,e)=>90*(t/e)// const renderSpriteAngled = (sprite:ISprite, angle:number, ctx:CanvasRenderingContext2D, camera:Camera) => {
;class tl{constructor(){this.executeDelta=(t,e)=>{let i=e.canvasContext,h=e.gameState,a=h.camera,r=new Path2D;r.rect(a.xOffset,a.yOffset,a.frameWidth*a.pixelToFrameRatio,a.frameHeight*a.pixelToFrameRatio),i.clip(r);/*ctx.beginPath();
		ctx.rect(
			camera.xOffset, 
			camera.yOffset, 
			camera.frameWidth*camera.pixelToFrameRatio,
			camera.frameHeight*camera.pixelToFrameRatio);
		
		ctx.clip();*/}}}class td{executeDelta(t,e){let i=e.gameState;for(let t of i.snowClouds)ti(e,t.particles)}}class to{executeDelta(t,e){let i=e.gameState;i.snowFall&&ti(e,i.snowFall.particles)}}class tn{constructor(){this.executeDelta=(t,e)=>{e.canvasContext;let i=e.gameState;i.shakes.forEach((e,h)=>{e.applyDelta(i.world,t),e.remove&&i.shakes.splice(h,1)})}}}class ty{constructor(t,e){this.stop=()=>{this.runnerStopCallback&&this.runnerStopCallback()},this.step=t=>{t*=1.1,//resize canvas
this.resizeCallback(),this.gameState.camera?.setCanvasSize(this.canvasContext),this.pipeline.execute(t,this.gameState)},this.bindUICapture=()=>{this.canvasContext.canvas.addEventListener("pointerdown",this.userClicked,{passive:!0});//document.body.addEventListener('mousedown', this.userClicked, true); 
//document.body.addEventListener('touchstart', this.userClicked, true); 
},this.userClicked=()=>{this.gameState.player.clicked()},this.canvasContext=t,this.resizeCallback=e,this.pipeline=new s.Pipeline.Pipeline(this.canvasContext),this.gameState=H(),this.setup()}setup(){// setup initial game state
this.gameState.camera=new s.Camera(!0,!0,960,640,this.canvasContext),this.gameState.platforms=V().getPlatformsForLevel(0,0,this.gameState.camera),this.gameState.obstacles=V().getObstaclesForLevel(0,0,this.gameState.camera),this.gameState.snowFall=new E(this.gameState.camera),// add input pipes
// add physics pipes
this.pipeline.addPipe(new U),this.pipeline.addPipe(new J),this.pipeline.addPipe(new K),this.pipeline.addPipe(new Z),this.pipeline.addPipe(new q),this.pipeline.addPipe(new tn),this.pipeline.addPipe(new N),this.pipeline.addPipe(new $),// add render pipes
//this.pipeline.addPipe(new CalculateDislayRatio());
this.pipeline.addPipe(new tl),//this.pipeline.addPipe(new CameraTransformPipe());
this.pipeline.addPipe(new te),this.pipeline.addPipe(new tt("#1e2640")),//this.pipeline.addPipe(new CanvasShakePipe('camera-effects'));
//this.pipeline.addPipe(new DrawTestPipe());
this.pipeline.addPipe(new ta),this.pipeline.addPipe(new th),this.pipeline.addPipe(new tr),this.pipeline.addPipe(new td),this.pipeline.addPipe(new to),this.bindUICapture(),//launch the game loop
this.runnerStopCallback=(0,s.Runners).variableStepRunner(this.step,1/90);//this.runnerStopCallback = fixedStepRunner(this.step, 1000/100);
//const runnerStopCallback = manualStepRunner(step, 20);
}}var tx=(t,e)=>{//we've only got the demo for now so we'll launch that. We dont need to worry about progress, etc.
new ty(t,e);//to cancel:
//demoScene.stop();
};(()=>{let t=document.body,{canvas:e,context:i,resizeCallback:h}=(0,r.createFullSizeCanvasAndReturnWith2DContextAndResizeCallback)("game-canvas",t);//set initial canvas size.
h(),tx(i,h)})();